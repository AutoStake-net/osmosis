// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/concentrated-liquidity/types/pool.proto

// This is a legacy package that requires additional migration logic
// in order to use the correct package. Decision made to use legacy package path
// until clear steps for migration logic and the unknowns for state breaking are
// investigated for changing proto package.

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoolIncentivizedLiquidityRecord struct {
	ID                                    uint64                                 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SecondsPerIncentivizedLiquidityGlobal github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=seconds_per_incentivized_liquidity_global,json=secondsPerIncentivizedLiquidityGlobal,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"seconds_per_incentivized_liquidity_global" yaml:"seconds_per_incentivized_liquidity_global"`
}

func (m *PoolIncentivizedLiquidityRecord) Reset()         { *m = PoolIncentivizedLiquidityRecord{} }
func (m *PoolIncentivizedLiquidityRecord) String() string { return proto.CompactTextString(m) }
func (*PoolIncentivizedLiquidityRecord) ProtoMessage()    {}
func (*PoolIncentivizedLiquidityRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cb52e0aea558b6c, []int{0}
}
func (m *PoolIncentivizedLiquidityRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolIncentivizedLiquidityRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolIncentivizedLiquidityRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolIncentivizedLiquidityRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolIncentivizedLiquidityRecord.Merge(m, src)
}
func (m *PoolIncentivizedLiquidityRecord) XXX_Size() int {
	return m.Size()
}
func (m *PoolIncentivizedLiquidityRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolIncentivizedLiquidityRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PoolIncentivizedLiquidityRecord proto.InternalMessageInfo

func (m *PoolIncentivizedLiquidityRecord) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func init() {
	proto.RegisterType((*PoolIncentivizedLiquidityRecord)(nil), "osmosis.concentratedliquidity.v1beta1.PoolIncentivizedLiquidityRecord")
}

func init() {
	proto.RegisterFile("osmosis/concentrated-liquidity/types/pool.proto", fileDescriptor_8cb52e0aea558b6c)
}

var fileDescriptor_8cb52e0aea558b6c = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x31, 0x4b, 0x33, 0x41,
	0x10, 0xbd, 0x0d, 0xe1, 0x83, 0xef, 0x0a, 0x8b, 0x60, 0x11, 0x53, 0xdc, 0x85, 0x40, 0x24, 0x16,
	0xb9, 0x35, 0xa4, 0x4b, 0x19, 0x02, 0x12, 0xb0, 0x08, 0x29, 0x45, 0x38, 0x6e, 0xf7, 0xc6, 0x73,
	0x71, 0x2f, 0x73, 0xde, 0x6e, 0x82, 0xf1, 0x57, 0xf8, 0x13, 0xfc, 0x21, 0xfe, 0x80, 0x94, 0x29,
	0xc5, 0x22, 0x48, 0xd2, 0x58, 0x5b, 0x58, 0x8b, 0x7b, 0x6b, 0xb8, 0x42, 0xc4, 0x6a, 0x77, 0x66,
	0xdf, 0x9b, 0xf7, 0x76, 0x9e, 0x4b, 0x51, 0xa5, 0xa8, 0x84, 0xa2, 0x1c, 0x67, 0x1c, 0x66, 0x3a,
	0x8f, 0x34, 0xc4, 0x5d, 0x29, 0x6e, 0xe7, 0x22, 0x16, 0x7a, 0x49, 0xf5, 0x32, 0x03, 0x45, 0x33,
	0x44, 0x19, 0x64, 0x39, 0x6a, 0xac, 0xb5, 0x2d, 0x21, 0x28, 0x13, 0xf6, 0xf8, 0x60, 0xd1, 0x63,
	0xa0, 0xa3, 0x5e, 0xc3, 0x4f, 0x10, 0x13, 0x09, 0xd4, 0x90, 0xd8, 0xfc, 0x8a, 0x6a, 0x91, 0x82,
	0xd2, 0x51, 0x9a, 0x15, 0x73, 0x1a, 0x47, 0xdc, 0x0c, 0x0a, 0x4d, 0x45, 0x8b, 0xc2, 0x3e, 0x1d,
	0x26, 0x98, 0x60, 0xd1, 0xff, 0xba, 0x15, 0xdd, 0xd6, 0x07, 0x71, 0xfd, 0x09, 0xa2, 0x1c, 0x1b,
	0x59, 0xb1, 0x10, 0xf7, 0x10, 0x9f, 0x7f, 0xeb, 0x4e, 0x81, 0x63, 0x1e, 0xd7, 0x0e, 0xdc, 0xca,
	0x78, 0x54, 0x27, 0x4d, 0xd2, 0xa9, 0x4e, 0x2b, 0xe3, 0x51, 0xed, 0x89, 0xb8, 0x27, 0x0a, 0x38,
	0xce, 0x62, 0x15, 0x66, 0x90, 0x87, 0xa2, 0xc4, 0x0d, 0xf7, 0xa6, 0xc3, 0x44, 0x22, 0x8b, 0x64,
	0xbd, 0xd2, 0x24, 0x9d, 0xff, 0x43, 0xb6, 0xda, 0xf8, 0xce, 0xcb, 0xc6, 0x3f, 0x4e, 0x84, 0xbe,
	0x9e, 0xb3, 0x80, 0x63, 0x6a, 0xed, 0xd9, 0xa3, 0xab, 0xe2, 0x9b, 0x62, 0x2f, 0xc1, 0x08, 0xf8,
	0xfb, 0xc6, 0x3f, 0x5d, 0x46, 0xa9, 0x1c, 0xb4, 0xfe, 0x2c, 0xd4, 0x9a, 0xb6, 0x2d, 0x76, 0x02,
	0xf9, 0x8f, 0xdf, 0x39, 0x33, 0xb8, 0x41, 0xf5, 0xed, 0xd1, 0x27, 0xc3, 0xcb, 0xd5, 0xd6, 0x23,
	0xeb, 0xad, 0x47, 0x5e, 0xb7, 0x1e, 0x79, 0xd8, 0x79, 0xce, 0x7a, 0xe7, 0x39, 0xcf, 0x3b, 0xcf,
	0xb9, 0x18, 0x96, 0x2c, 0xda, 0x58, 0xba, 0x32, 0x62, 0x6a, 0x1f, 0xea, 0xa2, 0xd7, 0xa7, 0x77,
	0xbf, 0x46, 0xcb, 0xfe, 0x99, 0xed, 0xf6, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x7e, 0x33,
	0x1f, 0x09, 0x02, 0x00, 0x00,
}

func (this *PoolIncentivizedLiquidityRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PoolIncentivizedLiquidityRecord)
	if !ok {
		that2, ok := that.(PoolIncentivizedLiquidityRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !this.SecondsPerIncentivizedLiquidityGlobal.Equal(that1.SecondsPerIncentivizedLiquidityGlobal) {
		return false
	}
	return true
}
func (m *PoolIncentivizedLiquidityRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolIncentivizedLiquidityRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolIncentivizedLiquidityRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SecondsPerIncentivizedLiquidityGlobal.Size()
		i -= size
		if _, err := m.SecondsPerIncentivizedLiquidityGlobal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ID != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolIncentivizedLiquidityRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovPool(uint64(m.ID))
	}
	l = m.SecondsPerIncentivizedLiquidityGlobal.Size()
	n += 1 + l + sovPool(uint64(l))
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolIncentivizedLiquidityRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolIncentivizedLiquidityRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolIncentivizedLiquidityRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsPerIncentivizedLiquidityGlobal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SecondsPerIncentivizedLiquidityGlobal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
